{"remainingRequest":"/Users/encepsupriatna/Downloads/bootstrap-vue-argon-dashboard-master/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/encepsupriatna/Downloads/bootstrap-vue-argon-dashboard-master/src/components/Collapse/Collapse.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/encepsupriatna/Downloads/bootstrap-vue-argon-dashboard-master/src/components/Collapse/Collapse.vue","mtime":1607281908000},{"path":"/Users/encepsupriatna/Downloads/bootstrap-vue-argon-dashboard-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/encepsupriatna/Downloads/bootstrap-vue-argon-dashboard-master/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/encepsupriatna/Downloads/bootstrap-vue-argon-dashboard-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/encepsupriatna/Downloads/bootstrap-vue-argon-dashboard-master/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n  name: 'collapse',\n  props: {\n    animationDuration: {\n      type: Number,\n      default: 250,\n      description: 'Collapse animation duration'\n    },\n    multipleActive: {\n      type: Boolean,\n      default: true,\n      description: 'Whether you can have multiple collapse items opened at the same time'\n    },\n    activeIndex: {\n      type: Number,\n      default: -1,\n      description: 'Active collapse item index'\n    }\n  },\n  provide() {\n    return {\n      animationDuration: this.animationDuration,\n      multipleActive: this.multipleActive,\n      addItem: this.addItem,\n      removeItem: this.removeItem,\n      deactivateAll: this.deactivateAll\n    };\n  },\n  data() {\n    return {\n      items: []\n    };\n  },\n  methods: {\n    addItem(item) {\n      const index = this.$slots.default.indexOf(item.$vnode);\n      if (index !== -1) {\n        this.items.splice(index, 0, item);\n      }\n    },\n    removeItem(item) {\n      const items = this.items;\n      const index = items.indexOf(item);\n      if (index > -1) {\n        items.splice(index, 1);\n      }\n    },\n    deactivateAll() {\n      this.items.forEach(item => {\n        item.active = false;\n      });\n    },\n    activateItem() {\n      if (this.activeIndex !== -1) {\n        this.items[this.activeIndex].active = true;\n      }\n    }\n  },\n  mounted() {\n    this.$nextTick(() => {\n      this.activateItem();\n    });\n  },\n  watch: {\n    activeIndex() {\n      this.activateItem();\n    }\n  }\n};\n",{"version":3,"sources":["Collapse.vue"],"names":[],"mappings":";;;;;;;;;;;;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Collapse.vue","sourceRoot":"src/components/Collapse","sourcesContent":["<template>\n  <div\n    id=\"accordion\"\n    role=\"tablist\"\n    aria-multiselectable=\"true\"\n    class=\"accordion\"\n  >\n    <slot></slot>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'collapse',\n  props: {\n    animationDuration: {\n      type: Number,\n      default: 250,\n      description: 'Collapse animation duration'\n    },\n    multipleActive: {\n      type: Boolean,\n      default: true,\n      description: 'Whether you can have multiple collapse items opened at the same time'\n    },\n    activeIndex: {\n      type: Number,\n      default: -1,\n      description: 'Active collapse item index'\n    }\n  },\n  provide() {\n    return {\n      animationDuration: this.animationDuration,\n      multipleActive: this.multipleActive,\n      addItem: this.addItem,\n      removeItem: this.removeItem,\n      deactivateAll: this.deactivateAll\n    };\n  },\n  data() {\n    return {\n      items: []\n    };\n  },\n  methods: {\n    addItem(item) {\n      const index = this.$slots.default.indexOf(item.$vnode);\n      if (index !== -1) {\n        this.items.splice(index, 0, item);\n      }\n    },\n    removeItem(item) {\n      const items = this.items;\n      const index = items.indexOf(item);\n      if (index > -1) {\n        items.splice(index, 1);\n      }\n    },\n    deactivateAll() {\n      this.items.forEach(item => {\n        item.active = false;\n      });\n    },\n    activateItem() {\n      if (this.activeIndex !== -1) {\n        this.items[this.activeIndex].active = true;\n      }\n    }\n  },\n  mounted() {\n    this.$nextTick(() => {\n      this.activateItem();\n    });\n  },\n  watch: {\n    activeIndex() {\n      this.activateItem();\n    }\n  }\n};\n</script>\n\n<style scoped></style>\n"]}]}