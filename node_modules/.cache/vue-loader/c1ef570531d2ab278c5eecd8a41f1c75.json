{"remainingRequest":"/Users/encepsupriatna/Downloads/bootstrap-vue-argon-dashboard-master/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/encepsupriatna/Downloads/bootstrap-vue-argon-dashboard-master/src/components/Inputs/BaseCheckbox.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/encepsupriatna/Downloads/bootstrap-vue-argon-dashboard-master/src/components/Inputs/BaseCheckbox.vue","mtime":1607281908000},{"path":"/Users/encepsupriatna/Downloads/bootstrap-vue-argon-dashboard-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/encepsupriatna/Downloads/bootstrap-vue-argon-dashboard-master/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/encepsupriatna/Downloads/bootstrap-vue-argon-dashboard-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/encepsupriatna/Downloads/bootstrap-vue-argon-dashboard-master/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n  name: \"base-checkbox\",\n  model: {\n    prop: \"checked\"\n  },\n  props: {\n    checked: {\n      type: [Array, Boolean],\n      description: \"Whether checkbox is checked\"\n    },\n    disabled: {\n      type: Boolean,\n      description: \"Whether checkbox is disabled\"\n    },\n    inline: {\n      type: Boolean,\n      description: \"Whether checkbox is inline\"\n    },\n    inputClasses: {\n      type: [String, Object, Array],\n      description: \"Checkbox input classes\"\n    },\n    type: {\n      type: String,\n      description: 'Checkbox type (e.g info, danger etc)'\n    }\n  },\n  data() {\n    return {\n      cbId: \"\",\n      touched: false\n    };\n  },\n  computed: {\n    model: {\n      get() {\n        return this.checked;\n      },\n      set(check) {\n        if (!this.touched) {\n          this.touched = true;\n        }\n        this.$emit(\"input\", check);\n      }\n    },\n    inlineClass() {\n      if (this.inline) {\n        return `form-check-inline`;\n      }\n    }\n  },\n  created() {\n    this.cbId = Math.random()\n      .toString(16)\n      .slice(2);\n  }\n};\n",{"version":3,"sources":["BaseCheckbox.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAmBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"BaseCheckbox.vue","sourceRoot":"src/components/Inputs","sourcesContent":["<template>\n  <div class=\"custom-control custom-checkbox\"\n       :class=\"[\n       {disabled: disabled},\n       {[`custom-checkbox-${type}`]: type},inlineClass]\">\n    <input :id=\"cbId\"\n           class=\"custom-control-input\"\n           :class=\"inputClasses\"\n           type=\"checkbox\"\n           :disabled=\"disabled\"\n           v-model=\"model\"/>\n    <label :for=\"cbId\" class=\"custom-control-label\">\n      <slot>\n        <span v-if=\"inline\">&nbsp;</span>\n      </slot>\n    </label>\n  </div>\n</template>\n<script>\n  export default {\n    name: \"base-checkbox\",\n    model: {\n      prop: \"checked\"\n    },\n    props: {\n      checked: {\n        type: [Array, Boolean],\n        description: \"Whether checkbox is checked\"\n      },\n      disabled: {\n        type: Boolean,\n        description: \"Whether checkbox is disabled\"\n      },\n      inline: {\n        type: Boolean,\n        description: \"Whether checkbox is inline\"\n      },\n      inputClasses: {\n        type: [String, Object, Array],\n        description: \"Checkbox input classes\"\n      },\n      type: {\n        type: String,\n        description: 'Checkbox type (e.g info, danger etc)'\n      }\n    },\n    data() {\n      return {\n        cbId: \"\",\n        touched: false\n      };\n    },\n    computed: {\n      model: {\n        get() {\n          return this.checked;\n        },\n        set(check) {\n          if (!this.touched) {\n            this.touched = true;\n          }\n          this.$emit(\"input\", check);\n        }\n      },\n      inlineClass() {\n        if (this.inline) {\n          return `form-check-inline`;\n        }\n      }\n    },\n    created() {\n      this.cbId = Math.random()\n        .toString(16)\n        .slice(2);\n    }\n  };\n</script>\n"]}]}